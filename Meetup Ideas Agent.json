{
  "active": false,
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-13T01:14:49.373Z",
  "id": "mZiFPGLDFLuMFquT",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Meetup Ideas Agent",
  "nodes": [
    {
      "parameters": {
        "jsCode": "let output = $input.first().json.output;\nlet regex = /```json\\s*([\\s\\S]*?)\\s*```/g;\nlet matches = [];\nlet match;\n\n// Extract all JSON code blocks\nwhile ((match = regex.exec(output)) !== null) {\n  matches.push(match[1].trim());\n}\n\n// Return a single object if only one block was found, otherwise an array of objects\nif (matches.length === 1) {\n  return JSON.parse(matches[0]);\n} else {\n  return matches.map(jsonStr => JSON.parse(jsonStr));\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        620,
        0
      ],
      "id": "f967e460-543f-477f-b1fc-9cecadba1da1",
      "name": "Code"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "pgi0t7qbh4xlrxt",
        "table": "m9jqqsyqze4pdg6",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Title",
              "fieldValue": "={{ $json.Title }}"
            },
            {
              "fieldName": "=Skill Level",
              "fieldValue": "={{ $json[\"Skill Level\"] }}"
            },
            {
              "fieldName": "Description",
              "fieldValue": "={{ $json.Description }}"
            },
            {
              "fieldName": "=Agenda",
              "fieldValue": "={{ $json.Agenda }}"
            },
            {
              "fieldName": "Target Audience",
              "fieldValue": "={{ $json[\"Target Audience\"] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        840,
        0
      ],
      "id": "ed98009d-3b9e-4a5f-a7b1-3f13699599c0",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "mZ1bN8fBGJ1SO75T",
          "name": "NoCoDB Internal"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "Generate an event json object for each skill level, Beginner, Intermediate, and Advance, as JSON objects for NocoDB. Follow these instructions:\n\n1. Choose 3 different technology topics to create meetups for.\n\n2. For each topic, perform the following loop:\n   \n   a. Generate a JSON object for a BEGINNER level meetup with this structure:\n   {\n     \"Title\": \"An engaging, specific title that clearly indicates both the topic and beginner skill level\",\n     \"Skill Level\": \"Beginner\",\n     \"Start Date Time\": \"Date and time in format: YYYY-MM-DD HH:MM AM/PM EST (use realistic future dates)\",\n     \"Duration\": \"Length of event (e.g., '2 hours', '90 minutes')\",\n     \"Description\": \"2-3 paragraphs with accessible language, explaining fundamental concepts, avoiding jargon\",\n     \"Topic Status\": \"One of: Confirmed, Tentative, or Proposed\",\n     \"Agenda\": \"A detailed timeline of activities appropriate for beginners\",\n     \"Target Audience\": \"Specific description of who would benefit, minimal prerequisite knowledge\"\n   }\n   \n   b. IMPORTANT: Return ONLY the complete JSON object with no additional text, explanations, or commentary. Return the raw JSON object and nothing else.\n   \n   c. After receiving the JSON object, the user will manually add it to NocoDB and then ask for the next object.\n   \n   d. Generate a JSON object for an INTERMEDIATE level meetup on the same topic.\n   \n   e. IMPORTANT: Return ONLY the complete JSON object with no additional text, explanations, or commentary. Return the raw JSON object and nothing else.\n   \n   f. After receiving the JSON object, the user will manually add it to NocoDB and then ask for the next object.\n   \n   g. Generate a JSON object for an ADVANCE level meetup on the same topic (IMPORTANT: use \"Advance\" not \"Advanced\" as the exact value for the \"Skill Level\" field to match NocoDB's accepted values).\n   \n   h. IMPORTANT: Return ONLY the complete JSON object with no additional text, explanations, or commentary. Return the raw JSON object and nothing else.\n\n3. Proceed to the next topic and repeat steps 2a through 2h when prompted by the user.\n\nEach skill level should have appropriately tailored content:\n- Beginner: Use accessible language, explain fundamental concepts, avoid jargon\n- Intermediate: Assume basic knowledge, introduce more advanced concepts, use moderate technical terminology\n- Advance: Use technical language appropriate for experts, cover complex topics in depth\n\nIMPORTANT: \n- For the \"Skill Level\" field, only use the exact values \"Beginner\", \"Intermediate\", or \"Advance\" as these are the only values accepted by the NocoDB column.\n- Return ONLY the raw JSON object with absolutely no additional text before or after. No explanations, no \"Here's your JSON object\", no \"Next I'll create...\", nothing but the JSON itself.\n\nEXAMPLES OF EXPECTED OUTPUT FORMAT:\n\nExample 1 (Beginner):\n```json\n{\n  \"Title\": \"Introduction to Cloud Computing for Non-Technical Users\",\n  \"Skill Level\": \"Beginner\",\n  \"Start Date Time\": \"2025-04-15 06:30 PM EST\",\n  \"Duration\": \"2 hours\",\n  \"Description\": \"Curious about what 'the cloud' actually means for your business? This beginner-friendly session breaks down cloud computing concepts without the technical jargon. We'll explain how cloud services can reduce your IT costs, improve team collaboration, and create more flexible work options. You'll learn the differences between services like Dropbox, Google Workspace, and Microsoft 365 in plain language.\\n\\nThis workshop is specifically designed for those with no technical background. We'll use real-world examples and analogies that make sense for business owners. By the end of the session, you'll understand the basic cloud options available, know which questions to ask when considering cloud services, and feel confident making informed decisions about cloud adoption for your organization.\",\n  \"Topic Status\": \"Confirmed\",\n  \"Agenda\": \"6:30 - 6:45 PM: Welcome and introduction\\n6:45 - 7:15 PM: Cloud computing basics explained in non-technical terms\\n7:15 - 7:30 PM: Break and networking\\n7:30 - 8:00 PM: Practical business applications of cloud services\\n8:00 - 8:30 PM: Guided evaluation of cloud options for your specific business needs\\n8:30 - 8:45 PM: Q&A session\",\n  \"Target Audience\": \"Small business owners, office managers, and decision-makers with minimal technical knowledge who need to understand cloud options. No previous technical experience required.\"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        220,
        0
      ],
      "id": "f28bf9e5-b244-4471-912e-b7008e61da7e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        220
      ],
      "id": "d43b51f2-dc54-4eea-b25c-c7675ede671e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "sTmNKjvehSYtW09j",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "456cff93-cb0d-4c1a-a917-a392ce33142d",
      "name": "When chat message received",
      "webhookId": "969abf54-8ef6-4f3d-a304-491f4f463a0c"
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        320,
        220
      ],
      "id": "1a215312-c75d-40f3-9d51-ab01be402be0",
      "name": "Window Buffer Memory"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-03-13T01:14:49.377Z",
      "updatedAt": "2025-03-13T01:14:49.377Z",
      "role": "workflow:owner",
      "workflowId": "mZiFPGLDFLuMFquT",
      "projectId": "WCIiaWERZpaZ5IaT"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-13T03:10:01.000Z",
  "versionId": "d40c42c5-50b9-4d1a-88e6-b92ee5eb868e"
}